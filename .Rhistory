demo()_
demo()
getwd()
arbuthnot
source("http://www.openintro.org/stat/data/arbuthnot.R")}
source("http://www.openintro.org/stat/data/arbuthnot.R")
arbuthnot
dim(arbuthnot)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
names()
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot\$boys
arbuthnot
arbuthnot\$boys
names(arbuthnot)
arbuthnot\boys
arbuthnot/boys
arbuthnot/$boys
arbuthnot$boys
arbuthnot$girls
names(arbuthnot)
arbuthnot$year
arbuthnot
plot(x = arbuthnot\$year, y = arbuthnot\$girls)
plot(x = arbuthnot$year, y = arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$boys)
plot(x = arbuthnot$year, y = arbuthnot$boys-arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$boys type="1")
plot(x = arbuthnot$year, y = arbuthnot$boys, type="1")
plot(x = arbuthnot$year, y = arbuthnot$boys, type="l")
?plot
plot(x = arbuthnot$year, y = arbuthnot$boys, type="b")
plot(x = arbuthnot$year, y = arbuthnot$boys, type="o")
plot(x = arbuthnot$year, y = arbuthnot$boys, type="o")
plot(x = arbuthnot$year, y = arbuthnot$boys, type="b")
plot(x = arbuthnot$year, y = arbuthnot$boys, type="o")
?plot
plot(x = arbuthnot$year, y = arbuthnot$boys, type="c")
?plot
plot(x = arbuthnot$year, y = arbuthnot$boys, type="h")
?plot
plot(x = arbuthnot$year, y = arbuthnot$boys, type="s")
?plot
plot(x = arbuthnot$year, y = arbuthnot$boys, type="S")
?plot
plot(x = arbuthnot$year, y = arbuthnot$boys, type="n")
?plot
a <- available.packages()
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
View(arbuthnot)
View(arbuthnot)
getwd()
getwd()
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3,14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0:2), times=40)
rep(c(0,1,2), times=40)
rep(c(0:2), times=10)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
swirl()
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "ToddF")
my_name <- c(my_char, "ToddF")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
?xyplot
library(lattice)
?xyplot
library(ggplot2)
str(mpg)
qplot(displ, cyl, data=mpg)
qplot(displ, cyl, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom = c("point", "smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(displ, hwy, data=mpg, facets=cyl~drv)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=drv~.) # facets by col (2 var scatter)
qplot(displ, data=mpg, facets=drv~.) # facets by col (1 var hist)
qplot(displ, hwy, data=mpg, color=drv, geom = c("point", "density"))
qplot(displ, hwy, data=mpg, color=drv, geom = c(density"))
;
)
""
qplot(displ, hwy, data=mpg, color=drv, geom = c("density"))
qplot(displ, data=mpg, facets=drv~.) # facets by col (1 var hist)
qplot(displ, data=mpg, facets=drv~., geom = "density")
qplot(displ, data=mpg, col=drv, geom = "density")
qplot(displ, cyl, data=mpg, shape=drv)
qplot(displ, hwy, data=mpg, color=drv, geom = c("point", "smooth"), method="lm")
qplot(displ, hwy, data=mpg, color=drv, geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg, color=drv, geom = c("point", "smooth"), method="lm")
?geom
?qplot
g <- ggplot(movies, aes(votes, rating))
class(g)
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
?aes
library(ggplot)
library(ggplot2)
qplot(displ, cyl, data=mpg, shape=drv) # circles, triangles, and squares for drv
g <- ggplot(mpg, aes(displ, cyl))
print(g)
summary(g)
g + geom_point() # autoprint the chart
?geom_point
qplot(votes, rating, data = movies)
?geom_smooth
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point(method = "lm") + geom_smooth() # with linear smoother
g + geom_point() + geom_smooth(method = "lm") # with linear smoother
g + geom_point() + facet_grid(. ~ drv) + geom_smooth(method = "lm") # with linear
g + geom_point() + facet_grid(. ~ drv) + geom_smooth(method = "lm") + ggtitle("sdf")
g + geom_point() + facet_grid(. ~ drv) + geom_smooth(method = "lm") + ggtitle("sdf") + theme_bw()
g + geom_point() + ggtitle("sdf") + theme_bw()
g + geom_point(color="red") + ggtitle("sdf") + theme_bw()
g + geom_point(color="red", size=4) + ggtitle("sdf") + theme_bw()
g + geom_point(color="red", size=4, alpha=1/2) + ggtitle("sdf") + theme_bw()
g + geom_point(color="red", size=4, alpha=1/22) + ggtitle("sdf") + theme_bw()
g + geom_point(color="red", size=4, alpha=1/4) + ggtitle("sdf") + theme_bw()
g + geom_point(aes(color=drv), size=4, alpha=1/4) + ggtitle("sdf") + theme_bw()
g + geom_point(aes(color=drv), size=4) + ggtitle("sdf") + theme_bw()
60/1.2
36/8
set.seed(1234)
par(mar(c(0,0,0,0)))
x <- rnorm(12, mean = repl(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = repl(c(1,2,1), each=4), sd = 0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar = (c(0,0,0,0)))
x <- rnorm(12, mean = repl(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = repl(c(1,2,1), each=4), sd = 0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar = (c(0,0,0,0)))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar = (c(2,2,2,2)))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
df <- data.frame(x = x, y = y)
dist(df)
distxy <- dist(df)  # lower triangle matrix
hClust <- hclust(distxy)
plot(hClust)
set.seed(1234)
par(mar = (c(2,2,2,2)))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
df <- data.frame(x,y)
kmeansObj <- kmeans(df, centers=3)
kmeansObj
par(mar = rep(0.2,4))
plot(x,y, col = kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd=3)
set.seed(1234)
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
df <- data.frame(x,y)
kmeansObj <- kmeans(df, centers=5)
par(mar = rep(0.2,4))
plot(x,y, col = kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col = 1:5, pch = 3, cex = 3, lwd=3)
sample(1:12)
dm <- as.matrix(dataframe)[sample)1:12, ]
dm <- as.matrix(dataFrame)[sample)1:12, ]
set.seed(1234)
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
df <- data.frame(x,y)
dm <- as.matrix(df)[sample)1:12, ]
dm <- as.matrix(df)[sample(1:12), ]
t(dm)[,nrow(dm):1)]
t(dm)[,nrow(dm):1]
image(t(dm)[,nrow(dm):1], yaxt = 'n')
set.seed(1234)
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
df <- data.frame(x,y)
kmeansObj <- kmeans(df, centers=3)
dm <- as.matrix(df)[sample(1:12), ]
image(t(dm)[,nrow(dm):1], yaxt = 'n')
image(t(dm)[,order(kmeansObj$cluster)], yaxt = 'n')
40/241
241/40
heat.colors()
topo.colors()
?heat.colors
topo.colors(9)
topo.colors(1)
topo.colors(2)
topo.colors(3)
rainbow(4)
?mean
?rainbow
colors()
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x,y)
?rgb
plot(x,y)
plot(x,y, pch = 19)
plot(x,y, pch = 19, col = rgb(0,0,0,0.2))
plot(x,y, pch = 19, col = rgb(0,0,0,0))
plot(x,y, pch = 19, col = rgb(0,0,0,0, 1))
plot(x,y, pch = 19, col = rgb(0,0,0,0, 0.5))
plot(x,y, pch = 19, col = rgb(0,0,0,0, 0.2))
plot(x,y, pch = 19, col = rgb(0,0,0,0.2))
plot(x,y, pch = 19, col = rgb(0,0,0,0.9))
plot(x,y, pch = 19, col = rgb(0,0,0,0.1))
plot(x,y, pch = 19, col = rgb(255,0,0,0.1))
plot(x,y, pch = 19, col = rgb(1,0,0,0.1))
heat.colors()
heat.colors(2)
rgb(1,0,0,0.1))
rgb(1,0,0,0.1)
plot(x,y, pch = 19, col = heat.colors(1)
)
plot(x,y, pch = 19, col = heat.colors(3))
plot(x,y, pch = 19, col = heat.colors(20))
plot(x,y, pch = 19, col = heat.colors(99))
colorRamp(c(red, blue))
colorRamp(c("red", "blue"))
p <- colorRamp(c("red", "blue"))
plot(x,y, pch = 19, col = p)
plot(x,y, pch = 19, col = p())
p(1)
p(0)
p <- colorRampPalette(c("red", "blue"))
plot(x,y, pch = 19, col = p
)
plot(x,y, pch = 19, col = p())
p
p(0)
p(1)
p(2)
plot(x,y, pch = 19, col = p(10))
a <- 2500000 ^ 2
b <- a ^ 2
d <- b ^ 2
e <- b * 2
e <- b ^ 2
e <- d ^ 2
4*4
16*4
64*4
install.packages('knitr', dependencies = TRUE)
.5 * .9
.5 * .1
45/46
.1 * .9
5^3
3^5
setwd("/common/coursera/reproduce")
install.packages('ProjectTemplate')
dir()
library('ProjectTemplate')
create.project('ReproduceProj1')
originaldata <- read.csv("activity.csv")
setwd("/common/coursera/reproduce/proj1/RepData_PeerAssessment1")
originaldata <- read.csv("activity.csv")
originaldata$datePosix <- as.POSIXlt(originaldata$date)
originaldata$datePosix$min <- originaldata$datePosix$min + originaldata$interval
originaldata$wday <- originaldata$datePosix$wday
numDays <- as.integer(max(originaldata$datePosix) - min(originaldata$datePosix))
samplesPerDay <- length(originaldata$date) / numDays
dataClean <- originaldata[!is.na(originaldata$steps),]
averageByIntervalAndWday <- ddply(dataClean[c(1,3,5)], .(interval, wday), numcolwise(mean))
averageByIntervalAndWday$steps <- round(averageByIntervalAndWday$steps, digits=0)
library(plyr)
dataClean <- originaldata[!is.na(originaldata$steps),]
averageByIntervalAndWday <- ddply(dataClean[c(1,3,5)], .(interval, wday), numcolwise(mean))
averageByIntervalAndWday$steps <- round(averageByIntervalAndWday$steps, digits=0)
View(averageByIntervalAndWday)
?setkey
library(data.table)
?setkey
setkey(averageByIntervalAndWday, c(interval, wday))
averageByIntervalAndWday <- data.table(ddply(dataClean[c(1,3,5)], .(interval, wday), numcolwise(mean)))
averageByIntervalAndWday$steps <- round(averageByIntervalAndWday$steps, digits=0)
setkey(averageByIntervalAndWday, c(interval, wday))
setkey(averageByIntervalAndWday, c("interval", "wday"))
setkey(averageByIntervalAndWday, "interval", "wday")
key(averageByIntervalAndWday)
dt[0,0]
averageByIntervalAndWday[0,0]
View(averageByIntervalAndWday)
averageByIntervalAndWday[5,3]
averageByIntervalAndWday[3,5]
averageByIntervalAndWday[c(3,5)]
averageByIntervalAndWday <- ddply(dataClean[c(1,3,5)], .(interval, wday), numcolwise(mean))
averageByIntervalAndWday$steps <- round(averageByIntervalAndWday$steps, digits=0)
View(averageByIntervalAndWday)
averageByIntervalAndWday[averageByIntervalAndWday$interval=0 & averageByIntervalAndWday$wday=6,]
averageByIntervalAndWday[averageByIntervalAndWday$interval==0 & averageByIntervalAndWday$wday==6,]
averageByIntervalAndWday[averageByIntervalAndWday$interval==5 & averageByIntervalAndWday$wday==3,]
averageByIntervalAndWday[averageByIntervalAndWday$interval==5 & averageByIntervalAndWday$wday==3,]$steps
dataDirty <- originaldata[is.na(originaldata$steps),]
dataDirty$steps <- averageByIntervalAndWday[averageByIntervalAndWday$interval==dataDirty$interval & averageByIntervalAndWday$wday==dataDirty$wday,]$steps
plot(myts, xlab="day", ylab="avg steps for 5-minute interval")
lookupMissingValue <- function(interval, wday) {
1
}
lookupMissingValue(1,1)
lookupMissingValue <- function(interval, wday) {
averageByIntervalAndWday[averageByIntervalAndWday$interval==interval & averageByIntervalAndWday$wday==wday,]$steps
}
lookupMissingValue(1,1)
View(averageByIntervalAndWday)
lookupMissingValue(0,1)
lookupMissingValue(5,3)
lookupMissingValue(5,99)
a <- lookupMissingValue(5,99)
class(a)
a <- lookupMissingValue(5,3)
class(a)
dataDirty$steps <- lookupMissingValue(dataDirty$interval, dataDirty$wday)
lookupMissingValue(dataDirty$interval, dataDirty$wday)
?tapply
dataDirty[1,]
a < dataDirty[1,]
a <- dataDirty[1,]
class(a)
length(dataDirty)
length(dataDirty$data)
length(dataDirty$date)
for(i:length(dataDirty$date)) {
if(is.na(dataDirty$steps[i])) {
print("na")
}
for(i in 0:length(dataDirty$date)) {
if(is.na(dataDirty$steps[i])) {
print("na")
}
for(i in 1:length(dataDirty$date)) {
if(is.na(dataDirty$steps[i])) {
print("na")
}
dataDirty$steps[0]
dataDirty$steps[1]
View(dataDirty)
for(i in 1:length(dataDirty$date)) {
#    if(is.na(dataDirty$steps[i])) {
print("na")
#    }
}
dataDirty$steps[1]
is.na(dataDirty$steps[1])
for(i in 1:length(dataDirty$date)) {
#    if(is.na(dataDirty$steps[i])) {
print(is.na(dataDirty$steps[i]))
#    }
}
for(i in 1:length(dataDirty$date)) {
if(is.na(dataDirty$steps[i])) {
print(is.na(dataDirty$steps[i]))
}
for(i in 1:length(dataDirty$date)) {
if(is.na(dataDirty$steps[i])) {
print(is.na(dataDirty$steps[i]))
}
dataDirty <- originaldata[is.na(originaldata$steps),]
for(i in 1:length(dataDirty$date)) {
if(is.na(dataDirty$steps[i])) {
print(is.na(dataDirty$steps[i]))
}
for(i in 1:length(dataDirty$date)) {
if(is.na(dataDirty$steps[i])) {
print(is.na(dataDirty$steps[i]))
dataDirty$steps[i] <- lookupMissingValue(dataDirty$interval, dataDirty$wday)
}
warnings()
dataDirty <- originaldata[is.na(originaldata$steps),]
for(i in 1:length(dataDirty$date)) {
if(is.na(dataDirty$steps[i])) {
print(is.na(dataDirty$steps[i]))
dataDirty$steps[i] <- lookupMissingValue(dataDirty$interval[i], dataDirty$wday[i])
}
View(dataDirty)
ataClean <- originaldata # TODO: verify this is a copy
averageByIntervalAndWday <- ddply(dataClean[c(1,3,5)], .(interval, wday), numcolwise(mean))
averageByIntervalAndWday$steps <- round(averageByIntervalAndWday$steps, digits=0)
lookupMissingValue <- function(interval, wday) {
averageByIntervalAndWday[averageByIntervalAndWday$interval==interval & averageByIntervalAndWday$wday==wday,]$steps
}
# brute force loop
for(i in 1:length(dataClean$date)) {
if(is.na(dataClean$steps[i])) {
interval <- dataClean$interval[i]
wday <- dataClean$wday[i]
dataClean$steps[i] <- lookupMissingValue(interval, wday)
}
print(mean(originaldata$steps))
print(mean(dataClean$steps))
dataClean <- originaldata # TODO: verify this is a copy
for(i in 1:length(dataClean$date)) {
if(is.na(dataClean$steps[i])) {
interval <- dataClean$interval[i]
wday <- dataClean$wday[i]
dataClean$steps[i] <- lookupMissingValue(interval, wday)
}
print(mean(originaldata$steps))
print(mean(dataClean$steps))
print("new value", dataClean$steps[1])
print(paste("new value", dataClean$steps[1]))
lookupMissingValue <- function(interval, wday) {
averageByIntervalAndWday[averageByIntervalAndWday$interval==interval & averageByIntervalAndWday$wday==wday,]$steps
}
lookupMissingValue(5,3)
